//Load idle and boot module
loadi(69,11);

loadi(54,67);
loadi(55,68);

//Setting SP to kernel stk of idle
SP = 82*512-1;

//breakpoint;
call BOOT_MODULE;
//breakpoint;

//Setting page table for idle1 and idle2

R1 = 0;
while(R1<2) do

	PTBR = PAGE_TABLE_BASE + R1*14*20;
	PTLR = 10;

	[PTBR + 0] = 63;
	[PTBR + 1] = "0100";
	[PTBR + 2] = 64;
	[PTBR + 3] = "0100";

	[PTBR + 4] = -1;
	[PTBR + 5] = "0000";
	[PTBR + 6] = -1;
	[PTBR + 7] = "0000";

	[PTBR + 8] = 69;
	[PTBR + 9] = "0100";
	[PTBR + 10] = -1;
	[PTBR + 11] = "0000";
	[PTBR + 12] = -1;
	[PTBR + 13] = "0000";
	[PTBR + 14] = -1;
	[PTBR + 15] = "0000";
	
	[PTBR+17] = "0110";
	[PTBR+18] = -1;
	[PTBR+19] = "0000";
	
	if(R1==1) then
	
		[PTBR+16] = 83;
		[PROCESS_TABLE +R1*224+ 11] = 84;
		[PROCESS_TABLE + 224 + 1] = 14;

	else
		
		[PTBR+16] = 70;
		[PROCESS_TABLE +11] = 76;		
		[PROCESS_TABLE + R1*224 + 1] = 0;
	endif;

	

	//Setting up Proccess Table for idle
	[PROCESS_TABLE + R1*224 + 0] = 0;
	[PROCESS_TABLE + R1*224 + 3] = 0;
	[PROCESS_TABLE + R1*224 + 4] = "RUNNING";

	[PROCESS_TABLE + R1*224 + 12] = 0;
	[PROCESS_TABLE + R1*224 + 13] = 8*512;

	[PROCESS_TABLE + R1*224 + 14] = PTBR;
	[PROCESS_TABLE + R1*224 + 15] = 10;

	R1 = R1+1; 

endwhile;

 
//Setting page table for swapper
PTBR = PAGE_TABLE_BASE + 15*20;
PTLR = 10;

[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

[PTBR + 8] = 69;
[PTBR + 9] = "0100";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";


//Entry point
R1 =[69*512+1];
[70*512] = R1;
[81*512] = R1;

PTBR = PAGE_TABLE_BASE;
PTLR = 10;

SP = 8*512;
start;

ireturn;
