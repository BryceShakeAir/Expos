alias userSP R0;
userSP = SP;
alias currentPID R1;
currentPID = [SYSTEM_STATUS_TABLE+CORE*5 +1];
alias currProcessTable R2;
currProcessTable = PROCESS_TABLE + currentPID*16;

//Switch stk;
[currProcessTable + 13] = SP;
SP = [currProcessTable + 11]*512 -1;

//Acquire_kernel_lock
multipush(R0,R1,R2);
R1 = 1;
call ACCESS_CONTROL;
multipop(R0,R1,R2);

//Setting mode
[currProcessTable + 9] = 21;

alias returnAddr R3;
returnAddr = [ PTBR + 2*( (userSP-1)/512 ) ]*512 + (userSP-1)%512;

//1.Check if user is root and pid is shell 
if( [currProcessTable + 3]==1 && currentPID == 2 ) then

	
	
	//2. Checking all disk blocks that are dirty and commited back
	R4 = 0;
	while(R4<4) do
		
		if([BUFFER_TABLE + R4*4 +1]==1&&[BUFFER_TABLE + R4*4 +0]!=-1 ) then
		
			//Call Disk store
			
			multipush(R1,R2,R3,R4,R5);
		
			R1 = 1;
			R2 = [SYSTEM_STATUS_TABLE+CORE*5 +1];
			//Buffer Cache
			R3 = 71 + R4; 
			R4 = [BUFFER_TABLE + R4*4 + 0];
			
			call DEVICE_MANAGER;
	
			multipop(R1,R2,R3,R4,R5);
			
			//6.Clean it up
			
			[BUFFER_TABLE + R4*4 + 1] = 0;
			
			
		
		endif;	
		R4 = R4+1;
	endwhile;

	//reseting secondary core and unlock schedule lock
	reset;
	[SCHED_LOCK] = 0;

	//3.Calling KILL_ALL process
	multipush(R1,R2,R3,R4,R5);

	R1 = 5;
	R2 = [SYSTEM_STATUS_TABLE + CORE*5 +1];
	
	call PROCESS_MANAGER;

	multipop(R1,R2,R3,R4,R5);
	
	//4.store the inode table, root file and dfl into disk
	
	backup;
	
	R2 = currentPID;
	R3 =  59;
	R4 = 3;
	R1 = 1;
	
	call DEVICE_MANAGER;
	
	restore;

	backup;
	
	R2 = currentPID;
	R3 = 60;
	R4 = 4;
	R1 = 1;
	call DEVICE_MANAGER;
	
	restore;
	
	//Root file
	backup;
	
	R2 = currentPID;
	R3 = 62;
	R4 = 5;
	R1 = 1;
	call DEVICE_MANAGER;
	
	restore;
	
	//dfl
	backup;
	
	R2 = currentPID;
	R3 = 61;
	R4 = 2;
	R1 = 1;
	
	call DEVICE_MANAGER;
	
	restore;
	
	[returnAddr] = 0;	
	
	
	
else
	[returnAddr] =-1;

endif;

halt;
