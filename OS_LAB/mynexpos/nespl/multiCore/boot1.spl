//Load lib
loadi(63,13);
loadi(64,14);

//load init code
loadi(65,7);


//load shell code
loadi(67,9);
loadi(68,10);

R1 = 40;
R2 = 53;
while(R1<54) do

	loadi(R1,R2);
	R1 = R1+1;
	R2 = R2+1;

endwhile;

R1 = 2;
R2 = 15;
while( R1<38 ) do

	loadi(R1,R2);
	R1 = R1+1;
	R2 = R2+1;

endwhile;

//loading controlAM module
loadi(132,516);
loadi(133,517);

//load sec bootstrap loader
loadi(128,512);

//load inode
loadi(59,3);
loadi(60,4);
//Load DFL
loadi(61,2);
//load root
loadi(62,5);

breakpoint;
//Marking all other process as terminated;
R13 = PROCESS_TABLE + 2*16;
while(R13<28928) do
	
	[R13 + 6] = 0;
	[R13 + 0] = 0;
	[R13 + 4] = "TERMINATED";
	R13 = R13 + 16;	

endwhile;


//Initialize disk status table
[DISK_STATUS_TABLE + 0]= 0;
//Initializing TERMINAL STATUS TABLE
[TERMINAL_STATUS_TABLE + 0] = 0;


//Setting up Page Table for init

//PTBR PTLR

PTBR = PAGE_TABLE_BASE +20;
PTLR = 10;
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";
[PTBR+16] = 66;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";
//MAKING PROCESS TABLE
[PROCESS_TABLE + 27] = 77;
[PROCESS_TABLE + 17] = 1;
[PROCESS_TABLE + 19 ] = 0;
[PROCESS_TABLE + 20] = "CREATED";
[PROCESS_TABLE + 28] = 0;
[PROCESS_TABLE + 29] = 8*512;
[PROCESS_TABLE + 30] = PAGE_TABLE_BASE+20;
[PROCESS_TABLE + 31] = 10;


//Entry point
[66*512] = [65*512 + 1];

//PTBR PTLR
PTBR = PAGE_TABLE_BASE +40;
PTLR = 10;

//Setting up Page Table for shell

[PTBR+0] = 63;
[PTBR+1] = "0100";

[PTBR+2] = 64;
[PTBR+3] = "0100";

[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = 68;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";


//MAKING PROCESS TABLE for shell
[PROCESS_TABLE + 43] = 80;
[PROCESS_TABLE + 33] = 2;
[PROCESS_TABLE + 34] = 1;
[PROCESS_TABLE + 35] = 1;
[PROCESS_TABLE + 36] = "TERMINATED";
[PROCESS_TABLE + 44] = 0;
[PROCESS_TABLE + 45] = 8*512;
[PROCESS_TABLE + 46] = PTBR;
[PROCESS_TABLE + 47] = 10;


//Entry point
[78*512] = [67*512 + 1];

//Initialize DISK MAP TABLE for Shell
R9= 0;
while(R9<10) do

	[DISK_MAP_TABLE + 20 + R9] = -1;
	R9 = R9+1;
endwhile;
//Setting the code block number in DMT 
[DISK_MAP_TABLE + 20 + 4 ] = 9;
[DISK_MAP_TABLE + 20 + 5 ] = 10;

//Setting ResourceTable
alias reqProcessTable R9;
reqProcessTable = PROCESS_TABLE + 16;
alias ResourceTableEntry R10;

ResourceTableEntry = ([reqProcessTable + 11]+1)*512 -20;
R11 = ([reqProcessTable + 11]+1)*512;
while(ResourceTableEntry < R11 ) do
	[ResourceTableEntry ] = -1;
	ResourceTableEntry = ResourceTableEntry +1;
endwhile;


//Initializing SemaphoreTable
alias ind R9;
ind = 0;
R12 = SEMAPHORE_TABLE;
while(ind<32) do

	[R12 + 0] = -1;
	[R12 + 1] = 0;
	ind = ind + 1;
	R12 = R12+4;
endwhile;

//Initialize FST
alias index R1;
index = 0;
R12 = FILE_STATUS_TABLE;
while(index<MAX_FILE_NUM) do

	[R12 + 0] = -1;
	[R12+ 1] = -1;
	index = index+1;
	R12 = R12 + 4;

endwhile;

//Setting up Proccess Table for swapper
[PROCESS_TABLE + 251] = 82;
[PROCESS_TABLE + 241] = 15;
[PROCESS_TABLE + 240] = 0;
[PROCESS_TABLE + 243] = 0;
[PROCESS_TABLE + 244] = "CREATED";

[PROCESS_TABLE + 252] = 0;
[PROCESS_TABLE + 253] = 8*512;

[PROCESS_TABLE + 254] = PAGE_TABLE_BASE + 300 ;
[PROCESS_TABLE + 255] = 10;

//Initialize SST
//CURRENT PID = 0;	
[SYSTEM_STATUS_TABLE + 0] = 0;
[SYSTEM_STATUS_TABLE + 1] = 0;
[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE +4] = 0;
[SYSTEM_STATUS_TABLE +5] = 0;
//Initailizing MEM_FREE_COUNT
[SYSTEM_STATUS_TABLE + 2] = 43;
//Intialize 2nd PID
[SYSTEM_STATUS_TABLE + 6] = 14;
[SYSTEM_STATUS_TABLE + 7] = 0;

//Intializing access control variables
[KERN_LOCK] = 0;
[SCHED_LOCK] = 0;

//Initialize MEM_FREE_LIST
index =0;
alias memInd R12;
memInd = MEMORY_FREE_LIST;
while(index<85) do

	[memInd] = 1;
	index  = index + 1;
	memInd = memInd +1;

endwhile;
while(index<128) do

	[memInd] = 0;
	memInd = memInd +1;
	index = index + 1;
endwhile;

//Initialize Buffer Table
index = 0;
R12 = BUFFER_TABLE; 
while(index<MAX_BUFFER) do

	[R12 + 0 ] = -1;
	[R12+ 1 ] = 0;
	[R12 + 2 ] = -1;
	index = index+1;
	R12 = R12 + 4	;	

endwhile;

//Initialize OFT
index = 0;
R12 = OPEN_FILE_TABLE;
while(index<MAX_OPENFILE_NUM) do

	[R12 + 0] = -1;
	[R12+ 1] = 0;
	index = index +1;
	R12 = R12 + 4;
endwhile;

breakpoint;
return;
