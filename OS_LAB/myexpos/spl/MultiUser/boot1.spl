//Load lib
loadi(63,13);
loadi(64,14);

//load init code
loadi(65,7);


//load shell code
loadi(67,9);
loadi(68,10);

//loading exceptions
loadi(2,15);
loadi(3,16);
//loading timer
loadi(4, 17);
loadi(5, 18);
//Load disk interrupt handler
loadi(6,19);
loadi(7,20);

//Loading Resource Manager
loadi(40,53);
loadi(41,54);

//Load processManager
loadi(42,55);
loadi(43,56);


//Load MemoryManager
loadi(44,57);
loadi(45,58);

//Load File Manager
loadi(46,59);
loadi(47,60);


//Loading Device Manager
loadi(48,61);
loadi(49,62);

//Loading scheduler
loadi(50,63);
loadi(51,64);

//load console Interrupt Handler
loadi(8,21);
loadi(9,22);

//Load int4
loadi(10,23);
loadi(11,24);
//Load int5
loadi(12,25);
loadi(13,26);
//Load int6
loadi(14,27);
loadi(15,28);
//loading int7
loadi(16,29);
loadi(17,30);
//loading int8
loadi(18,31);
loadi(19,32);
//Load int9
loadi(20,33);
loadi(21,34);
//load int10
loadi(22,35);
loadi(23,36);
//Load int11
loadi(24,37);
loadi(25,38);
//Load int12
loadi(26,39);
loadi(27,40);
//Load int13
loadi(28,41);
loadi(29,42);
//Load int14
loadi(30,43);
loadi(31,44);
//Load int15
loadi(32,45);
loadi(33,46);
//Load int16
loadi(34,47);
loadi(35,48);
//Load int17
loadi(36,49);
loadi(37,50);




//load inode
loadi(59,3);
loadi(60,4);

//load root
loadi(62,5);


//Load DFL
loadi(61,2);


//Initialize disk status table
[DISK_STATUS_TABLE + 0]= 0;

//Initialize MEM_FREE_LIST
alias index R1;
index =0;
while(index<80) do

	[MEMORY_FREE_LIST + index] = 1;
	index  = index + 1;

endwhile;
while(index<128) do

	[MEMORY_FREE_LIST + index] = 0;
	index = index + 1;
endwhile;

//Initailizing MEM_FREE_COUNT
[SYSTEM_STATUS_TABLE + 2] = 47;

//UAP of idle

//Initializing TERMINAL STATUS TABLE

[TERMINAL_STATUS_TABLE + 0] = 0;

//PTBR PTLR

PTBR = PAGE_TABLE_BASE +20;
PTLR = 10;

//Setting up Page Table for init

[PTBR+0] = 63;
[PTBR+1] = "0100";

[PTBR+2] = 64;
[PTBR+3] = "0100";

[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

[PTBR+16] = 66;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";


//MAKING PROCESS TABLE
[PROCESS_TABLE + 16 + 11] = 77;
[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 3] = 0;
[PROCESS_TABLE + 16 + 4] = "CREATED";
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE+20;
[PROCESS_TABLE + 16 + 15] = 10;


//Entry point
[66*512] = [65*512 + 1];

//PTBR PTLR

PTBR = PAGE_TABLE_BASE +40;
PTLR = 10;

//Setting up Page Table for shell

[PTBR+0] = 63;
[PTBR+1] = "0100";

[PTBR+2] = 64;
[PTBR+3] = "0100";

[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = 68;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";


//MAKING PROCESS TABLE for shell
[PROCESS_TABLE + 32 + 11] = 80;
[PROCESS_TABLE + 32 + 1] = 2;
[PROCESS_TABLE + 32 + 2] = 1;
[PROCESS_TABLE + 32 + 3] = 1;
[PROCESS_TABLE + 32 + 4] = "TERMINATED";
[PROCESS_TABLE + 32 + 12] = 0;
[PROCESS_TABLE + 32 + 13] = 8*512;
[PROCESS_TABLE + 32 + 14] = PTBR;
[PROCESS_TABLE + 32 + 15] = 10;


//Entry point
[78*512] = [67*512 + 1];

//Initialize DISK MAP TABLE for Shell

R9= 0;
while(R9<10) do

	[DISK_MAP_TABLE + 20 + R9] = -1;
	R9 = R9+1;
endwhile;
//Setting the code block number in DMT 
[DISK_MAP_TABLE + 20 + 4 ] = 9;
[DISK_MAP_TABLE + 20 + 5 ] = 10;

//Setting ResourceTable

alias reqProcessTable R9;
reqProcessTable = PROCESS_TABLE + 16;
alias ResourceTableEntry R10;

ResourceTableEntry = ([reqProcessTable + 11]+1)*512 -20;
R11 = ([reqProcessTable + 11]+1)*512;
while(ResourceTableEntry < R11 ) do
	[ResourceTableEntry ] = -1;
	ResourceTableEntry = ResourceTableEntry +1;
endwhile;


//Initializing SemaphoreTable
alias ind R9;
ind = 0;
while(ind<32) do

	[SEMAPHORE_TABLE + ind*4 + 0] = -1;
	[SEMAPHORE_TABLE + ind*4 + 1] = 0;
	ind = ind + 1;
endwhile;

//Initialize FST
index = 0;
while(index<MAX_FILE_NUM) do

	[FILE_STATUS_TABLE + index*4 + 0] = -1;
	[FILE_STATUS_TABLE + index*4 + 1] = -1;
	index = index+1;

endwhile;

//Initialize Buffer Table
index = 0;
while(index<MAX_BUFFER) do

	[BUFFER_TABLE + index* 4 + 0 ] = -1;
	[BUFFER_TABLE + index* 4 + 1 ] = 0;
	[BUFFER_TABLE + index* 4 + 2 ] = -1;
	index = index+1;

endwhile;

//Initialize OFT
index = 0;
while(index<MAX_OPENFILE_NUM) do

	[OPEN_FILE_TABLE +index*4 + 0] = -1;
	[OPEN_FILE_TABLE +index*4 + 1] = 0;
	index = index +1;
endwhile;


//Marking all other process as terminated;
R12 = 2;
while(R12<16) do
	
	[PROCESS_TABLE + R12*16 + 4] = "TERMINATED";
	R12 = R12 + 1;
	
endwhile;

return;
