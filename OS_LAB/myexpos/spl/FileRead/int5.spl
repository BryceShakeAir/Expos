alias userSP R0;
userSP = SP;
alias currentPID R1;
currentPID = [SYSTEM_STATUS_TABLE+1];
alias currProcessTable R2;
currProcessTable = PROCESS_TABLE + currentPID*16;

//Switch stk;
[currProcessTable + 13] = SP;
SP = [currProcessTable + 11]*512 -1;

//Extracting sys call num
alias sysNum R3;
sysNum = [ [ PTBR + 2*( (userSP-5)/512 ) ]*512 + (userSP-5)%512  ]; 

alias returnAddr R4;
returnAddr = [ PTBR + 2*( (userSP-1)/512 ) ]*512 + (userSP-1)%512;

//Open sys call
if(sysNum==2) then
	
	[currProcessTable + 9] = 2; 
	alias fileName R7;
	fileName =  [ [ PTBR +2*( (userSP-4)/512 )]*512 + (userSP-4)%512  ]; 
	
	//1. find a free resource table entry
	
	alias resTableBase R5;
	alias index R6;
	index = 0;
	
	resTableBase =[currProcessTable + 11]*512 + RESOURCE_TABLE_OFFSET;
	
	while(index < 8) do
	
		if([ resTableBase + 2*index ]==-1) then
						
			break;
		endif;
		
		index = index + 1;
	
	endwhile;
	
	//If there are no free resource table entries
	if(index==8 ) then
	
		[returnAddr] = -3;
	
	else
	
		//2.Call open function module
		
		multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
		
		R1 = 3;
		R2 = fileName;
		
		call FILE_MANAGER;
		
		multipop(R1,R2,R3,R4,R5,R6,R7,R8);
		
		if(R0==-1) then
				//file is not a data file
				multipop(R0);
				[returnAddr]=-1;
				//Reset mode
				[currProcessTable + 9] = 0;

				//Switch stk
				SP = [currProcessTable + 13];
				ireturn;
		endif;
		if(R0==-2) then
					
				//max files already opened
				multipop(R0);
				[returnAddr]=-2;
				//Reset mode
				[currProcessTable + 9] = 0;

				//Switch stk
				SP = [currProcessTable + 13];
				ireturn;
						
		endif;
		
		[ resTableBase + 2*index ] = FILE;
		[ resTableBase + 2*index + 1] = R0;
		
		multipop(R0);
		
		//3.return file desc
		breakpoint;
		[returnAddr] = index;
		
	endif;

endif;

//Close sys call

if(sysNum==3) then
	
	[currProcessTable + 9] = 3; 
	alias fileDesc R5;
	fileDesc = [ [ PTBR +2*( (userSP-4)/512 )]*512 + (userSP-4)%512  ];
	
	//1.Check if fileDesc is a valid file
	if(fileDesc<0 || fileDesc>= 8) then
		
		[returnAddr] = -1;
		//Reset mode
		[currProcessTable + 9] = 0;

		//Switch stk
		SP = [currProcessTable + 13];
		ireturn;

	endif;
	
	alias resTableBase R6;
	resTableBase =[currProcessTable + 11]*512 + RESOURCE_TABLE_OFFSET;
	
	if([resTableBase + 2*fileDesc +0]!=FILE) then
	
		[returnAddr] = -1;
	
	else
	
		alias OFTindex R7; 
		OFTindex = [resTableBase + 2*fileDesc +1];
	
		//2.Call close module fn
		
		multipush(R0,R1,R2,R3,R4,R5,R6,R7);
		
		R1 = 4;
		R2 = OFTindex;
		
		call FILE_MANAGER;
		
		multipop(R0,R1,R2,R3,R4,R5,R6,R7);
		
		//3.Clear the resource table 
		[resTableBase + 2*fileDesc +0] = -1;
		[resTableBase + 2*fileDesc +1] = -1;

	endif;
	
endif;

//Reset mode
[currProcessTable + 9] = 0;

//Switch stk
SP = [currProcessTable + 13];
ireturn;


