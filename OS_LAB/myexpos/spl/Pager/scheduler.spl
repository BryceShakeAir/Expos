
//PID OF current instruction
alias currPID R0;
currPID = [SYSTEM_STATUS_TABLE + 1];

//Pushing BP
//BP = SP;
multipush (BP);

//Process Table entry of current process
alias currProcessTable R1;
currProcessTable = PROCESS_TABLE + 16*currPID;
[currProcessTable + 12] = SP%512;
[currProcessTable + 14] = PTBR;
[currProcessTable + 15] = PTLR;

alias newPID R2;
newPID = 0;

//Paging status is set
if( [SYSTEM_STATUS_TABLE + 5]!=0 ) then

	//If swapper daemon is blocked waiting for disk
	if( [PROCESS_TABLE + 15*16 + 4 ] =="WAIT_DISK" ) then
		
		//Schedule idle				
		newPID = 0;
		
	else
	
		//The first time paging status has been set
		
		newPID = 15;		

	endif;
	
	

else

	//Round robin scheduling for remaining non swapped process
	R3 = currPID;
	currPID = currPID+1;
	while( currPID<15 ) do
		
		if(([PROCESS_TABLE + 16*currPID + 4]=="READY"||[PROCESS_TABLE + 16*currPID + 4]=="CREATED")&&[PROCESS_TABLE + 16*currPID + 6]==0 ) then
			
			newPID = currPID;
			break;		
		endif;
		currPID = currPID+1;
		
	endwhile;
	if(currPID==16) then

		currPID = 1;
		while( currPID<R3 ) do
		
			if(([PROCESS_TABLE + 16*currPID + 4]=="READY"||[PROCESS_TABLE + 16*currPID + 4]=="CREATED")&&[PROCESS_TABLE + 16*currPID + 6]==0 ) then
				
				newPID = currPID;
				break;		
			endif;
			currPID = currPID+1;

		endwhile;
		
	endif;
		

endif;

//Updating SP of new Process
//Finding new ProcessTable

alias newProcessTable R3;
newProcessTable = PROCESS_TABLE + 16*newPID;

SP = [newProcessTable + 11]*512 + [newProcessTable + 12];
//Updating PTBR AND PTLR
PTBR = [newProcessTable + 14];
PTLR = [newProcessTable + 15]; 

//Updating System Status Table
[SYSTEM_STATUS_TABLE + 1] = newPID;

//is Process Created
//print [newProcessTable + 4];
if([newProcessTable + 4]=="CREATED") then

	BP = [ [newProcessTable+11]*512 ];   
	SP = [newProcessTable+13];
	[newProcessTable + 4]= "RUNNING";
	[newProcessTable + 9]= 0;
	ireturn;
	
endif;

[newProcessTable + 4]= "RUNNING";
//Restore BP
multipop (BP);
return;





