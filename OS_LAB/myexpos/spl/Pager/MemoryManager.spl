
alias functionNum R1;

//GET FREE PAGE
if(functionNum==1) then

	//Increse wait_mem_count
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] +1;
	
	alias currProcessTable R2;
	currProcessTable = PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16;
	
	//Checking if there are free pages for allocation
	while( [SYSTEM_STATUS_TABLE + 2]==0  ) do
		
		[currProcessTable + 4] = "WAIT_MEM";
		
		multipush(R1,R2);
		call CONTEXT_SWITCH;
		multipop(R1,R2);	
	endwhile;	 
	
	//Decrement mem_free_count and wait_mem_count;
	[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]-1;
	[SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3]-1;
	
	//Search MFL for free Page
	alias freePage R3;
	freePage =76;
	while(freePage<128) do
	
		if([MEMORY_FREE_LIST + freePage]==0) then
			[MEMORY_FREE_LIST + freePage]=1;
			break;
		endif;		
		freePage = freePage + 1;			

	endwhile;		
	
	R0 = freePage;
endif;

//RELEASE PAGE
if(functionNum==2) then
	
	alias pageNum R2;
	
	//MFL[UAPN]--;
	
	[MEMORY_FREE_LIST + pageNum ] = [MEMORY_FREE_LIST + pageNum ] - 1;
	
	if([MEMORY_FREE_LIST+ pageNum]==0) then
	
		//Increasing MFC
		[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]+1;
	endif;
	
	//Updating status to ready
	alias i R3;
	i = 0;
	
	while(i<16) do
	
		if( [PROCESS_TABLE + i*16 +4]=="WAIT_MEM" ) then
			
			[PROCESS_TABLE + i*16 +4]="READY";	
		
		endif;
		i = i+1;
	endwhile;
	

endif;

//GET FREE BLOCK
if(functionNum==3) then

	alias freeBlock R0;
	freeBlock = DISK_FREE_AREA;
	while(freeBlock<DISK_SWAP_AREA ) do

		if([ DISK_FREE_LIST +freeBlock]==0 ) then

			[ DISK_FREE_LIST +freeBlock]=1; 			break;
		
		endif;
		freeBlock = freeBlock +1;

	endwhile;

endif;
//RELEASE BLOCK
if(functionNum==4) then

	alias blockNum R2;
	alias reqPID R3;
	
	[DISK_FREE_LIST + blockNum] = [DISK_FREE_LIST + blockNum] -1;
	

endif;



//GET CODE PAGE
if(functionNum==5) then

	alias blockNum R2;
	//Search for blockNum in DMT;
	alias reqPID R3;
	reqPID = 1;
	
	while(reqPID<16) do

		R4 = 4;
		while( R4<8&&reqPID!=[SYSTEM_STATUS_TABLE+1]) do
			
			if([DISK_MAP_TABLE + reqPID*10 + R4]==blockNum ) then
				
				//If present return corresponding page number in PTB
				
				alias currentPageTable R5;
				currentPageTable = PAGE_TABLE_BASE + reqPID*20;
				
				if([currentPageTable+2*R4 + 1]!="0000" ) then 
				
					R0 = [currentPageTable+2*R4];
					[MEMORY_FREE_LIST + R0 ] = [MEMORY_FREE_LIST + R0 ]+1;					
					return;
				
				endif;
						
									
			endif;	
			
			R4 = R4 +1; 
		
		endwhile;
		
		reqPID = reqPID + 1;
	
	endwhile;
	//If not found , then call Get FREE PAGE
	alias newPage R4;
	multipush(R1,R2);
	
	R1 = 1;
	
	call MEMORY_MANAGER; 
	
	newPage = R0;
	
	multipop(R1,R2);
	
	//Call disk load to load from disk to newpage
	
	multipush(R1,R2,R4);
	
	
	R3 = newPage;
	R4 = blockNum;
	R1 = 2;
	R2 = [SYSTEM_STATUS_TABLE + 1];	
	
	call DEVICE_MANAGER;
	
	multipop(R1,R2,R4);

	//Return the allocated page
	R0 = newPage;

endif;
//get swap block
if(functionNum==6 ) then

	//Looping from DISK_SWAP_AREA TO disk Size -1 in dfl

	alias blockNum R0;
	blockNum = DISK_SWAP_AREA;
	while(blockNum<DISK_SIZE) do

		if([DISK_FREE_LIST + blockNum ]==0) then
			
			[DISK_FREE_LIST + blockNum ] = 1;
			break;	
		
		endif;
		blockNum = blockNum+1;
	endwhile;

endif;

return;
