alias userSP R0;
userSP = SP;
alias currentPID R1;
currentPID = [SYSTEM_STATUS_TABLE+1];
alias currProcessTable R2;
currProcessTable = PROCESS_TABLE + currentPID*16;

//Switch stk;
[currProcessTable + 13] = SP;
SP = [currProcessTable + 11]*512 -1;

//Extracting sys call num
alias sysNum R3;
sysNum = [ [ PTBR + 2*( (userSP-5)/512 ) ]*512 + (userSP-5)%512  ]; 

alias returnAddr R4;
returnAddr = [ PTBR + 2*( (userSP-1)/512 ) ]*512 + (userSP-1)%512;

//SEMGET SYS CALL
if(sysNum==17) then
	
	//Setting mode
	[currProcessTable + 9] = 17;

	alias resTableBase R5;
	alias index R6;
	index = 0;
	resTableBase =[currProcessTable + 11]*512 + RESOURCE_TABLE_OFFSET;
	
	while(index < 8) do
	
		if([ resTableBase + 2*index ]==-1) then
			break;
		endif;
		
		index = index + 1;
	
	endwhile;
	
	//If there are no free resource table entries
	if(index==8 ) then
	
		[returnAddr] = -1;
	
	else
		
		//Call aquireSemaphore
		alias semID R7;
		multipush(R0,R1,R2,R3,R4,R5,R6);
		
		R2 = currentPID;
		R1 = 6;
		
		call RESOURCE_MANAGER;
		
		semID = R0;
		
		multipop(R0,R1,R2,R3,R4,R5,R6);
		
		if(semID==-1) then
		
			[returnAddr] = -2;
				
		else
			
			//Updating the resource Table after getting a valid semID
			[resTableBase + 2*index ] = SEMAPHORE;
			[resTableBase + 2*index + 1] = semID;
			
			[returnAddr] = index;
			
		endif;
		
	endif; 

endif;

//SEMRELEASE

if(sysNum==18) then
	
	//Setting mode
	[currProcessTable + 9] = 18;

	alias semID R5;
	alias resTableBase R7;
	semID = [ [ PTBR + 2*( (userSP-4)/512 ) ]*512 + (userSP-4)%512 ];
	resTableBase =[currProcessTable + 11 ]*512 + RESOURCE_TABLE_OFFSET;	
	
	//Check if the SemID is valid 
	if(semID<0||semID>7|| [resTableBase + 2*semID]!=SEMAPHORE ) then
	
		[returnAddr] = -1;
	
	else
		
		//Call releaseSemaphore
		multipush(R0,R1,R2,R3,R4,R5,R6,R7);
		
		R3 = currentPID;
		R1 = 7;
		R2 = [resTableBase + 2*semID + 1];
		
		call MEMORY_MANAGER;
		
		multipop(R0,R1,R2,R3,R4,R5,R6,R7);
	
		//Clean up the resourceTable
		[resTableBase + 2*semID ] = -1;
		[returnAddr]=0;
		
	endif;

endif;


//Reset mode
[currProcessTable + 9] = 0;

//Switch stk
SP = [currProcessTable + 13];

ireturn;

